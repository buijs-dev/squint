// Copyright (c) 2021 - 2022 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "../../squint.dart";
import "../ast/ast.dart";
import "../common/common.dart";

/// Generate JSON (de)serialization methods for a dart class (CustomType).
extension JsonDecodingGenerator on CustomType {
  /// Generate deserialization method.
  String get generate => """
      |// Copyright (c) 2021 - 2022 Buijs Software
      |//
      |// Permission is hereby granted, free of charge, to any person obtaining a copy
      |// of this software and associated documentation files (the "Software"), to deal
      |// in the Software without restriction, including without limitation the rights
      |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      |// copies of the Software, and to permit persons to whom the Software is
      |// furnished to do so, subject to the following conditions:
      |//
      |// The above copyright notice and this permission notice shall be included in all
      |// copies or substantial portions of the Software.
      |//
      |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      |// SOFTWARE.
      |
      |import 'package:squint/squint.dart';
      |
      |/// Autogenerated JSON (de)serialization methods by Squint.
      |extension _${className}JsonBuilder on $className {
      |  JsonObject get toJsonObject => JsonObject.elements([
      |${members.toJsonElementSetters.join("\n")}
      |  ]);
      |
      |  String get toJson => toJsonObject.stringify;
      |}
      |
      |extension _${className}JsonString2Class on String {
      |  $className get to$className => jsonDecode.to$className;
      |}
      |
      |extension _${className}JsonObject2Class on JsonObject {
      |  $className get to$className => $className(
      |${members.toJsonElementGetters.join("\n")}
      |  );
      |}
      """
      .format;
}

extension on List<TypeMember> {
  List<String> get toJsonElementSetters => map((TypeMember tm) =>
          '    ${tm.type.toJsonType}(key: "${tm.name}", data: ${tm.name}),')
      .toList();

  List<String> get toJsonElementGetters => map((TypeMember tm) =>
      '    ${tm.name}: ${tm.toJsonGetter}("${tm.name}").data,').toList();
}

extension on AbstractType {
  String get toJsonType {
    if (this is CustomType) {
      throw SquintException(
        "Nested CustomType code generation not supported.",
      );
    }

    final type = className.removePrefixIfPresent("Nullable");

    switch (type) {
      case "String":
        return "JsonString";
      case "double":
        return "JsonNumber";
      case "bool":
        return "JsonBoolean";
      case "List":
        return "JsonArray<dynamic>";
      case "Map":
        return "JsonObject";
      default:
        throw SquintException("Unsupported data type: $className");
    }
  }

  String get standardRuntimeType {
    if (this is CustomType) {
      throw SquintException("Unsupported data type: $className");
    } else if (this is ListType) {
      return "List<${(this as ListType).child.standardRuntimeType}>";
    } else {
      return (this as StandardType).className;
    }
  }
}

extension on TypeMember {
  String get toJsonGetter {
    if (this.type is CustomType) {
      throw SquintException(
        "Nested CustomType code generation not supported.",
      );
    }

    final type = this.type.className.removePrefixIfPresent("Nullable");

    switch (type) {
      case "String":
        return "string";
      case "double":
        return "number";
      case "bool":
        return "boolean";
      case "List":
        return "array<${(this.type as ListType).child.standardRuntimeType}>";
      case "Map":
        return "JsonObject";
      default:
        throw SquintException("Unsupported data type: $type");
    }
  }
}
