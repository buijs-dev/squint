// Copyright (c) 2021 - 2022 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "../ast/ast.dart";
import "../common/common.dart";

/// Generate JSON (de)serialization methods for a dart class (CustomType).
extension JsonDecodingGenerator on CustomType {
  /// Generate deserialization method.
  String generateFile({
    required String relativeImport,
  }) =>
      """
      |// Copyright (c) 2021 - 2022 Buijs Software
      |//
      |// Permission is hereby granted, free of charge, to any person obtaining a copy
      |// of this software and associated documentation files (the "Software"), to deal
      |// in the Software without restriction, including without limitation the rights
      |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      |// copies of the Software, and to permit persons to whom the Software is
      |// furnished to do so, subject to the following conditions:
      |//
      |// The above copyright notice and this permission notice shall be included in all
      |// copies or substantial portions of the Software.
      |//
      |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      |// SOFTWARE.
      |
      |import '$relativeImport';
      |import 'package:squint/squint.dart';
      |
      |/// Autogenerated JSON (de)serialization methods by Squint.
      |extension ${className}JsonBuilder on $className {
      |  JsonObject get toJsonObject => JsonObject.elements([
      |${members.toJsonElementSetters.join("\n")}
      |  ]);
      |
      |  String get toJson => toJsonObject.stringify;
      |}
      |
      |extension ${className}JsonString2Class on String {
      |  $className get to$className => jsonDecode.to$className;
      |}
      |
      |extension ${className}JsonObject2Class on JsonObject {
      |  $className get to$className => $className(
      |${members.toJsonElementGetters.join("\n")}
      |  );
      |}
      """
          .format;
}

extension on List<TypeMember> {
  List<String> get toJsonElementSetters =>
      map((TypeMember tm) => "    ${tm.toJsonType},").toList();

  List<String> get toJsonElementGetters =>
      map((TypeMember tm) => "    ${tm.toJsonGetter},").toList();
}

extension on AbstractType {
  String get standardRuntimeType {
    if (this is CustomType) {
      throw SquintException("Unsupported data type: $className");
    } else if (this is ListType) {
      return "List<${(this as ListType).child.standardRuntimeType}>";
    } else {
      return (this as StandardType).className;
    }
  }
}

extension on TypeMember {
  String get toJsonGetter {
    final type = this.type.className.removePrefixIfPresent("Nullable");

    final valueJsonAnnotated = annotations
        .firstBy((element) => element.name == "JsonValue")
        ?.data["tag"];

    final jsonKey = valueJsonAnnotated ?? name;

    final decodeJsonAnnotated =
        annotations.firstBy((element) => element.name == "JsonDecode");

    if (decodeJsonAnnotated != null) {
      final method = decodeJsonAnnotated.data["using"];

      final unwrapperType = decodeJsonAnnotated.data["jsonElement"];

      String? unwrapper;

      if (unwrapperType == "JsonString") {
        unwrapper = 'string("$jsonKey")';
      } else if (unwrapperType == "JsonFloatingNumber") {
        unwrapper = 'float("$jsonKey")';
      } else if (unwrapperType == "JsonIntegerNumber") {
        unwrapper = 'integer("$jsonKey")';
      } else if (unwrapperType == "JsonBoolean") {
        unwrapper = 'boolean("$jsonKey")';
      } else if (unwrapperType == "JsonArray") {
        unwrapper =
            'array<${(this.type as ListType).child.standardRuntimeType}>("$jsonKey")';
      } else if (unwrapperType == "JsonObject") {
        unwrapper = 'object("$jsonKey")';
      } else {
        throw SquintException("Unsupported data type: $unwrapperType");
      }

      return "$name: $method($unwrapper)";
    }

    switch (type) {
      case "String":
        return '$name: string("$jsonKey").data';
      case "double":
        return '$name: float("$jsonKey").data';
      case "int":
        return '$name: integer("$jsonKey").data';
      case "bool":
        return '$name: boolean("$jsonKey").data';
      case "List":
        return '$name: array<${(this.type as ListType).child.standardRuntimeType}>("$jsonKey").data';
      case "Map":
        return '$name: object("$jsonKey").rawData()';
      default:
        throw SquintException("Unsupported data type: $type");
    }
  }

  String get toJsonType {
    final valueJsonAnnotated = annotations
        .firstBy((element) => element.name == "JsonValue")
        ?.data["name"];

    final jsonKey = valueJsonAnnotated ?? name;

    final encodeJsonAnnotated = annotations
        .firstBy((element) => element.name == "JsonEncode")
        ?.data["using"];

    if (encodeJsonAnnotated != null) {
      return "$encodeJsonAnnotated($name)";
    }

    final type = this.type.className.removePrefixIfPresent("Nullable");

    switch (type) {
      case "String":
        return 'JsonString(key: "$jsonKey", data: $name)';
      case "double":
        return 'JsonFloatingNumber(key: "$jsonKey", data: $name)';
      case "int":
        return 'JsonIntegerNumber(key: "$jsonKey", data: $name)';
      case "bool":
        return 'JsonBoolean(key: "$jsonKey", data: $name)';
      case "List":
        return 'JsonArray<dynamic>(key: "$jsonKey", data: $name)';
      case "Map":
        return 'JsonObject.fromMap($name, "$jsonKey")';
      default:
        throw SquintException("Unsupported data type: ${this.type.className}");
    }
  }
}
