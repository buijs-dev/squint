// Copyright (c) 2021 - 2023 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "../ast/ast.dart";
import "../common/common.dart";
import "dataclass_generator.dart";
import "shared.dart";

/// Generate JSON (de)serialization methods for a dart class [CustomType].
///
/// {@category generator}
extension JsonConversionExtensionsGenerator on CustomType {
  /// Generate deserialization method.
  ///
  /// {@category generator}
  String generateJsonDecodingFile({
    required String relativeImport,
  }) {
    final unwrapped =
        unwrapNestedTypes(members.map((e) => e.type).toList()).toSet();

    final enums = unwrapped.whereType<EnumType>().toSet();

    final customs = unwrapped.whereType<CustomType>().toSet();

    final imports = importStatements(Set<AbstractType>.of(unwrapped)
          ..addAll(enums)
          ..addAll(customs))
        .join();

    return """
      |// Copyright (c) 2021 - 2023 Buijs Software
      |//
      |// Permission is hereby granted, free of charge, to any person obtaining a copy
      |// of this software and associated documentation files (the "Software"), to deal
      |// in the Software without restriction, including without limitation the rights
      |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      |// copies of the Software, and to permit persons to whom the Software is
      |// furnished to do so, subject to the following conditions:
      |//
      |// The above copyright notice and this permission notice shall be included in all
      |// copies or substantial portions of the Software.
      |//
      |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      |// SOFTWARE.
      |
      |import 'package:squint_json/squint_json.dart';
      |import '$relativeImport';$imports
      |
      |/// Autogenerated JSON (de)serialization methods by Squint.
      |extension ${className}JsonBuilder on $className {
      |  JsonObject get toJsonObject => JsonObject.fromNodes(nodes:[
      |${members.toJsonNodeSetters().join(" ")}
      |  ]);
      |
      |  String get toJson => toJsonObject.stringify;
      |}
      |
      |extension ${className}JsonString2Class on String {
      |  $className get to$className => jsonDecode.to$className;
      |}
      |
      |extension ${className}JsonObject2Class on JsonObject {
      |  $className get to$className => $className(
      |${members.toJsonNodeGetters().join(" ")}
      |  );
      |}
      """
        .formattedDartCode;
  }
}

/// Generate JSON (de)serialization methods for an enum class [EnumType].
///
/// {@category generator}
extension JsonValueExtensionsGenerator on EnumType {
  /// Generate deserialization method.
  ///
  /// {@category generator}
  String generateJsonDecodingFile({
    required String relativeImport,
  }) {
    if (valuesJSON.length == values.length) {
      return _withSerializableNames(relativeImport);
    }

    return _withoutSerializableNames(relativeImport);
  }

  String _withoutSerializableNames(String import) => """
      |// Copyright (c) 2021 - 2023 Buijs Software
      |//
      |// Permission is hereby granted, free of charge, to any person obtaining a copy
      |// of this software and associated documentation files (the "Software"), to deal
      |// in the Software without restriction, including without limitation the rights
      |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      |// copies of the Software, and to permit persons to whom the Software is
      |// furnished to do so, subject to the following conditions:
      |//
      |// The above copyright notice and this permission notice shall be included in all
      |// copies or substantial portions of the Software.
      |//
      |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      |// SOFTWARE.
      |
      |import 'package:squint_json/squint_json.dart';
      |import '$import';
      |
      |/// Autogenerated JSON (de)serialization methods by Squint.
      |extension ${className}JsonBuilder on $className {
      |     String get toJsonValue => this.name;
      |}
      |
      |extension ${className}JsonString2Enum on String {
      |  $className get to$className {
      |    final valueOrNull = $className.values.firstBy((entry) => entry.name == this);
      |    if (valueOrNull == null) {
      |      throw SquintException("Unsupported JSON String: '\$this'");
      |    }
      |    return valueOrNull;
      |  }
      |}
      """
      .formattedDartCode;

  String _withSerializableNames(String import) => """
      |// Copyright (c) 2021 - 2023 Buijs Software
      |//
      |// Permission is hereby granted, free of charge, to any person obtaining a copy
      |// of this software and associated documentation files (the "Software"), to deal
      |// in the Software without restriction, including without limitation the rights
      |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      |// copies of the Software, and to permit persons to whom the Software is
      |// furnished to do so, subject to the following conditions:
      |//
      |// The above copyright notice and this permission notice shall be included in all
      |// copies or substantial portions of the Software.
      |//
      |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      |// SOFTWARE.
      |
      |import 'package:squint_json/squint_json.dart';
      |import '$import';
      |
      |/// Autogenerated JSON (de)serialization methods by Squint.
      |extension ${className}JsonBuilder on $className {
      |  String get toJsonValue {
      |     switch(this) {
${_serializableNameSetters.join("\n")}
      |     }
      |  }
      |}
      |
      |extension ${className}JsonString2Enum on String {
      |  $className get to$className {
      |     switch(this) {
${_serializableNameGetters.join("\n")}
      |       default:
      |         throw SquintException("Unsupported JSON String: '\$this'");
      |     }
      |  }
      |}
      """
      .formattedDartCode;

  List<String> get _serializableNameSetters {
    final output = <String>[];
    final total = values.length;
    for (var i = 0; i < total; i++) {
      output
        ..add("      |      case $className.${values[i]}:")
        ..add('      |          return "${valuesJSON[i]}";');
    }
    return output;
  }

  List<String> get _serializableNameGetters {
    final output = <String>[];
    final total = values.length;
    for (var i = 0; i < total; i++) {
      output
        ..add('      |      case "${valuesJSON[i]}":')
        ..add("      |          return $className.${values[i]};");
    }
    return output;
  }
}
