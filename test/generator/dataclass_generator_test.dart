// Copyright (c) 2021 - 2022 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "dart:core";

import "package:squint/squint.dart";
import "package:squint/src/converters/converters.dart";
import "package:test/test.dart";

void main() {
  test("Verify Converting a JSON String to a data class", () {
    // given
    const example = """
  {
     "id": 1,
     "isJedi": true,
     "hasPadawan": false,
     "bff": "Leia",
     "jedi": [
       "Obi-Wan", "Anakin", "Luke Skywalker"
     ],
     "coordinates": [22, 4.4, -15],
     "objectives": {
       "in-mission": false,
       "mission-results": [false, true, true, false]
     },
     "annoyance-rate": [
       { "JarJarBinks" : 9000 }
     ],
     "foo": null,
     "listOfObjectives": [
       {
         "in-mission": true,
         "mission-results": [false, true, true, true]
       },
       {
         "in-mission": false,
         "mission-results": [false, true, false, false]
       }
     ],
      "simpleMap": {
        "a": 1,
        "b": 2,
        "c": 4
      }
    }
    """;

    // when:
    final podo = example.jsonDecode
        .toCustomType(className: "Example")
        .generateDataClassFile();

    // then:
    expect(podo, """
// Copyright (c) 2021 - 2022 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import 'package:squint/squint.dart';

/// Autogenerated data class by Squint.
@squint
class Example {
  const Example({
    required this.id,
    required this.isJedi,
    required this.hasPadawan,
    required this.bff,
    required this.jedi,
    required this.coordinates,
    required this.objectives,
    required this.annoyanceRate,
    required this.foo,
    required this.listOfObjectives,
    required this.simpleMap,
  });

  @JsonValue("id")
  final int id;

  @JsonValue("isJedi")
  final bool isJedi;

  @JsonValue("hasPadawan")
  final bool hasPadawan;

  @JsonValue("bff")
  final String bff;

  @JsonValue("jedi")
  final List<String> jedi;

  @JsonValue("coordinates")
  final List<double> coordinates;

  @JsonEncode(using: encodeObjectives)
  @JsonDecode<Objectives, JsonObject>(using: decodeObjectives)
  @JsonValue("objectives")
  final Objectives objectives;

  @JsonValue("annoyance-rate")
  final List<Map<String, int>> annoyanceRate;

  @JsonValue("foo")
  final dynamic foo;

  @JsonValue("listOfObjectives")
  final List<Objectives> listOfObjectives;

  @JsonValue("simpleMap")
  final Map<String, int> simpleMap;
}

@squint
class Objectives {
  const Objectives({
    required this.inMission,
    required this.missionResults,
  });

  @JsonValue("in-mission")
  final bool inMission;

  @JsonValue("mission-results")
  final List<bool> missionResults;
}

JsonObject encodeObjectives(Objectives objectives) =>
    JsonObject.fromNodes(key: "objectives", nodes: [
      JsonBoolean(key: "in-mission", data: objectives.inMission),
      JsonArray<dynamic>(
          key: "mission-results", data: objectives.missionResults),
    ]);

Objectives decodeObjectives(JsonObject object) => Objectives(
      inMission: object.boolean("in-mission"),
      missionResults: object.array<bool>("mission-results"),
    );
""");
  });

  test("Verify a list of objects is decoded successfully", () {
    // given
    const example = """
        {
          "objectList": [
            { "a" : 1 }
          ]
        }""";

    // when:
    final decoded = example.jsonDecode;

    // then:
    expect(decoded.arrayNode<Map>("objectList").data[0]["a"], 1);
  });
}
